name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-core:
    name: Test Python Core
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('packages/core/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      working-directory: packages/core
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Run Python tests
      working-directory: packages/core
      run: |
        python -m pytest tests/ -v --cov=src/vibe_core --cov-report=xml
        
    - name: Upload Python coverage
      uses: codecov/codecov-action@v3
      with:
        file: packages/core/coverage.xml
        flags: python
        name: python-coverage

  test-webapp:
    name: Test Next.js Webapp
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      working-directory: packages/webapp
      run: npm run lint
      
    - name: Run type checking
      working-directory: packages/webapp
      run: npx tsc --noEmit
      
    - name: Run tests
      working-directory: packages/webapp
      run: npm test -- --coverage --watchAll=false
      
    - name: Upload webapp coverage
      uses: codecov/codecov-action@v3
      with:
        file: packages/webapp/coverage/lcov.info
        flags: typescript
        name: typescript-coverage

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-core, test-webapp]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install all dependencies
      run: npm run install-all
      
    - name: Build webapp
      working-directory: packages/webapp
      run: npm run build
      
    - name: Run integration tests
      working-directory: packages/core
      run: python -m pytest tests/integration/ -v
      env:
        NODE_ENV: test

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test-core, test-webapp, integration-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build webapp
      working-directory: packages/webapp
      run: npm run build
      
    - name: Deploy to production
      # Add your deployment steps here
      run: echo "Deploy to production environment"
